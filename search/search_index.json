{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Description Minimal and basic logger written in NodeJS for the Pyle of Mail application. Roadmap Logging to the console with log levels defined in env vars Color coded messages based on severity Option to obfuscate sensitive data when logging Option to prefix all log messages by a timestamp Logging to a file Logging to an external log server","title":"Home"},{"location":"#description","text":"Minimal and basic logger written in NodeJS for the Pyle of Mail application.","title":"Description"},{"location":"#roadmap","text":"Logging to the console with log levels defined in env vars Color coded messages based on severity Option to obfuscate sensitive data when logging Option to prefix all log messages by a timestamp Logging to a file Logging to an external log server","title":"Roadmap"},{"location":"changelog/","text":"Changelog @pyle_of_mail/logger v1.2.0 [19-03-2022] \ud83d\ude80 New Features : Added option to prefix messages by a timestamp. \ud83d\udd27 Fixes : N/A \ud83c\udf1f Improvements : Added documentation website via mkdocs. v1.1.0 [18-03-2022] \ud83d\ude80 New Features : Added obfuscate() method to hide sensitive data when logging. Added GitHub workflow to automatically create a new release when pushing to main Added GitHub workflow to automatically publish npm package on release. Added ability to write logs to a file as well as stdout. \ud83d\udd27 Fixes : Fixed mismatch for debug and info log levels. Fixed npm run format script for handling all files. \ud83c\udf1f Improvements : Added pre-commit hook to automatically run prettier Added basic script for testing purposes. v1.0.0 [13-03-2022] Initial release of @pyle_of_mail/logger ! \ud83e\udd47","title":"Changelog"},{"location":"changelog/#changelog-pyle_of_maillogger","text":"","title":"Changelog @pyle_of_mail/logger"},{"location":"changelog/#v120-19-03-2022","text":"\ud83d\ude80 New Features : Added option to prefix messages by a timestamp. \ud83d\udd27 Fixes : N/A \ud83c\udf1f Improvements : Added documentation website via mkdocs.","title":"v1.2.0 [19-03-2022]"},{"location":"changelog/#v110-18-03-2022","text":"\ud83d\ude80 New Features : Added obfuscate() method to hide sensitive data when logging. Added GitHub workflow to automatically create a new release when pushing to main Added GitHub workflow to automatically publish npm package on release. Added ability to write logs to a file as well as stdout. \ud83d\udd27 Fixes : Fixed mismatch for debug and info log levels. Fixed npm run format script for handling all files. \ud83c\udf1f Improvements : Added pre-commit hook to automatically run prettier Added basic script for testing purposes.","title":"v1.1.0 [18-03-2022]"},{"location":"changelog/#v100-13-03-2022","text":"Initial release of @pyle_of_mail/logger ! \ud83e\udd47","title":"v1.0.0 [13-03-2022]"},{"location":"license/","text":"MIT License Copyright (c) 2022 Pyle of Mail Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"user-guide/configuration-options/","text":"Setting the log level The log level and is set as an environment variable called LOG_LEVEL . Note The log level is NOT case sensitive. Example You can set the log level in a .env file and the logger will pick it up thanks to the dotenv package: # .env LOG_LEVEL = warn Log levels: Log Level Method Description Printed error logError Used to log problems that require code execution to stop. Always warn logWarn Used to log problems that do not require code execution to stop. LOG_LEVEL in [\"warn\", \"debug\", \"info\"] info logInfo Used to print generic informational messages. Informs the user on the actions performed. LOG_LEVEL in [\"debug\", \"info\"] debug logVars Used to print variables to the console. Mainly intended for development and debugging. LOG_LEVEL in [\"info\"] Adding a timestamp before each log message By defining the TIMESTAMP environment variable, the logger will automatically log the messages in the [{timestamp}] {message} fomrmat. Note The timestamp is NOT** case sensitive. Example You can set the timestamp in a .env file and the logger will pick it up thanks to the dotenv package: # .env TIMESTAMP = date Timestamp options TIMESTAMP = millis Will prefix the message with the current number of milliseconds from epoch. TIMESTAMP = date Will prefix the message with the current date in the YYYY-MM-DD HH:MM:SS:mmm . No timestamp If the TIMESTAMP variable is not set, then the logger will simply not prefix the messages with anything. This also happens if the value is not one of the 2 mentioned above. Logging to the console The logger class will print all your messages to the console by default. Logging to a file The logger will automatically log everything to a text file as well as to the console, as long as the LOG_FILE environment variable is defined. # .env LOG_FILE = /var/log/pyle-of-mail.log Logging to a syslog server Warning Not yet supported, planned for release 1.3.0 .","title":"Configuration Options"},{"location":"user-guide/configuration-options/#setting-the-log-level","text":"The log level and is set as an environment variable called LOG_LEVEL . Note The log level is NOT case sensitive. Example You can set the log level in a .env file and the logger will pick it up thanks to the dotenv package: # .env LOG_LEVEL = warn","title":"Setting the log level"},{"location":"user-guide/configuration-options/#log-levels","text":"Log Level Method Description Printed error logError Used to log problems that require code execution to stop. Always warn logWarn Used to log problems that do not require code execution to stop. LOG_LEVEL in [\"warn\", \"debug\", \"info\"] info logInfo Used to print generic informational messages. Informs the user on the actions performed. LOG_LEVEL in [\"debug\", \"info\"] debug logVars Used to print variables to the console. Mainly intended for development and debugging. LOG_LEVEL in [\"info\"]","title":"Log levels:"},{"location":"user-guide/configuration-options/#adding-a-timestamp-before-each-log-message","text":"By defining the TIMESTAMP environment variable, the logger will automatically log the messages in the [{timestamp}] {message} fomrmat. Note The timestamp is NOT** case sensitive. Example You can set the timestamp in a .env file and the logger will pick it up thanks to the dotenv package: # .env TIMESTAMP = date","title":"Adding a timestamp before each log message"},{"location":"user-guide/configuration-options/#timestamp-options","text":"TIMESTAMP = millis Will prefix the message with the current number of milliseconds from epoch. TIMESTAMP = date Will prefix the message with the current date in the YYYY-MM-DD HH:MM:SS:mmm . No timestamp If the TIMESTAMP variable is not set, then the logger will simply not prefix the messages with anything. This also happens if the value is not one of the 2 mentioned above.","title":"Timestamp options"},{"location":"user-guide/configuration-options/#logging-to-the-console","text":"The logger class will print all your messages to the console by default.","title":"Logging to the console"},{"location":"user-guide/configuration-options/#logging-to-a-file","text":"The logger will automatically log everything to a text file as well as to the console, as long as the LOG_FILE environment variable is defined. # .env LOG_FILE = /var/log/pyle-of-mail.log","title":"Logging to a file"},{"location":"user-guide/configuration-options/#logging-to-a-syslog-server","text":"Warning Not yet supported, planned for release 1.3.0 .","title":"Logging to a syslog server"},{"location":"user-guide/getting-started/","text":"Installing the package npm install @pyle_of_mail/logger Importing the package import * as Logger from \"@pyle_of_mail/logger\" ; Logging error messages Logger . logError ( \"This is an error message. Not only is this printed in red, but it throws an error and stops code execution.\" ); For more information on setting the log levels, see the Configuration Options page. Logging warning messages Logger . logWarn ( \"This is a warning message, and it should be printed in yellow. This probably means something went wrong, but not wrong enough as to quit execution.\" ); For more information on setting the log levels, see the Configuration Options page. Logging info messages Logger . logInfo ( \"This is an info message, and it should be printed in green.\" ); For more information on setting the log levels, see the Configuration Options page. Logging debug messages // execute some code const response = some_function ( some_param ); // log the output Logger . logVar ( response ); Say you want to obfuscate a variable when printing it to the console. It may be an access token or something. Say you want only the first n letters in clear and then you want it obfuscated. The logger package includes an obfuscate() method you can use: const TOKEN = \"my-super-secret-token\" ; Logger . logVar ( obfuscate ( TOKEN , 5 )); The above example will leave the first 5 characters in clear and then obfuscate the rest, producing: my-su**************","title":"Getting Started"},{"location":"user-guide/getting-started/#installing-the-package","text":"npm install @pyle_of_mail/logger","title":"Installing the package"},{"location":"user-guide/getting-started/#importing-the-package","text":"import * as Logger from \"@pyle_of_mail/logger\" ;","title":"Importing the package"},{"location":"user-guide/getting-started/#logging-error-messages","text":"Logger . logError ( \"This is an error message. Not only is this printed in red, but it throws an error and stops code execution.\" ); For more information on setting the log levels, see the Configuration Options page.","title":"Logging error messages"},{"location":"user-guide/getting-started/#logging-warning-messages","text":"Logger . logWarn ( \"This is a warning message, and it should be printed in yellow. This probably means something went wrong, but not wrong enough as to quit execution.\" ); For more information on setting the log levels, see the Configuration Options page.","title":"Logging warning messages"},{"location":"user-guide/getting-started/#logging-info-messages","text":"Logger . logInfo ( \"This is an info message, and it should be printed in green.\" ); For more information on setting the log levels, see the Configuration Options page.","title":"Logging info messages"},{"location":"user-guide/getting-started/#logging-debug-messages","text":"// execute some code const response = some_function ( some_param ); // log the output Logger . logVar ( response ); Say you want to obfuscate a variable when printing it to the console. It may be an access token or something. Say you want only the first n letters in clear and then you want it obfuscated. The logger package includes an obfuscate() method you can use: const TOKEN = \"my-super-secret-token\" ; Logger . logVar ( obfuscate ( TOKEN , 5 )); The above example will leave the first 5 characters in clear and then obfuscate the rest, producing: my-su**************","title":"Logging debug messages"}]}